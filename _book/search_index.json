[
["developper-fr.html", "Section 4 Développer 4.1 Directives 4.2 Comment développer des ateliers 4.3 Contribuer autrement", " Section 4 Développer 4.1 Directives Ce guide est conçu pour aider les développeurs et développeuses lors de la création et de la modification du contenu des ateliers R du CSBQ. Nous voulons nous assurer que les participants et participantes peuvent se concentrer sur le contenu présenté sans être distrait.e.s par des questions de style, de grammaire, de ponctuation et/ou de structure. Veuillez lire attentivement ce guide avant de commencer et vous y référer régulièrement pendant votre travail. 4.1.1 Principales priorités Nous avons établi ici une liste de priorités pour les concepteurs d’ateliers. L’idéal serait que les développeurs et développeuses accomplissent toutes ces tâches, mais si les circonstances rendent cela impossible, il est important de se concentrer sur les changements structurels avant les questions de style. Spécifique à l’adaptation des ateliers au cadre à distance: Les ateliers doivent s’adapter à un nouveau format de 3 heures (comprenant des exercices et une ou deux pauses de cinq minutes). Pour cela, vous pouvez cacher les diapositives des ateliers existants pour les adapter à ce format. Par exemple, vous pouvez masquer les exemples répétitifs, les diapositives non essentielles ou certaines des diapositives avancées supplémentaires qui sont incluses à la fin des ateliers. Nous sommes conscients que certains ateliers seront plus difficiles à raccourcir que d’autres; ce n’est pas un problème que les ateliers durent un peu plus de 3 heures pour garantir des informations précises et complètes. (Utilisez votre jugement). Ne supprimez pas les diapositives. Pour cacher une diapositive pour l’instruction à distance, utilisez la balise exclude: true. Voir un exemple ci-dessous : --- exclude: true # Titre de la diapositive : J&#39;adore les statistiques ! ### Contenu : Incroyable ! --- Développez de nouveaux exercices ou adaptez les exercices actuels pour mieux répondre au format d’atelier à distance et à l’utilisation des salles de réunion. Les exercices doivent être informatifs et attrayants. N’oubliez pas de prevoyer et de laisser aux participants et participantes le temps de travailler sur les exercices et de poser des questions. Priorités générales: Traiter les problèmes existants soumis à GitHub, qui sont notés dans la section “Issues”. S’assurer que le code fonctionne correctement et que le code correspond à la présentation de l’atelier. Continuez à vérifier cela au fur et à mesure que vous apportez des modifications. S’assurer que les versions francophone et anglophone d’un atelier sont toutes les deux mises à jour et que le contenu est équivalent. Les ateliers ne doivent pas contenir des fautes d’orthographe, de grammaire ou de ponctuation. Veiller à ce que les diapositives des ateliers soient rédigées dans un style cohérent, ce qui facilite le déroulement des ateliers et la compréhension des participants. Cela est particulièrement important lorsque l’on travaille en collaboration avec d’autres développeurs. Dans la mesure du possible, ajoutez des notes de présentation aux diapositives que vous modifiez. Vous pouvez écrire des notes que vous pourrez lire vous-même en mode présentateur quand vous appuyez sur le raccourci clavier P. Ces notes sont écrites sous trois points d’interrogation ???, avant la fin d’une diapositive. Voir l’exemple ci-dessous : --- Le contenu de cet atelier est essentiel. ??? Note : _Le présentateur doit chanter cette diapositive aux participants_. --- 4.1.2 Règles structurelles Ne laissez pas le contenu des diapositives déborder de l’écran. Le code utilisé pour générer un résultat (chiffre ou calcul) doit correspondre au code affiché. Utilisez les cochettes de retour ` chaque fois que vous mentionnez une fonction, un objet ou un paquet dans votre prose. Utilisez les trois dernières cases à cocher ``` pour séparer les morceaux de code de la prose. Faites attention à la fluidité et aux distractions. 4.1.3 Grammaire et style Faites attention à la ponctuation, à l’orthographe et à la grammaire. Faites votre mieux pour être clair et concis. Évitez les phrases trop longues. Relisez l’atelier dans son intégralité pour vous assurer que le flux est bon. N’hésitez pas à demander à votre pair en développement de réviser votre texte. 4.1.4 Apprentissage active Les ateliers doivent être interactifs et comprendre des exercices et des sondages. Nous présentons ci-dessous quelques exemples d’exercices, de modes d’apprentissage fondés sur des données probantes et de stratégies efficaces pour organiser des ateliers à distance pour les participants. Nous vous recommandons de prendre votre temps et de bien planifier l’élaboration des exercices. Veillez à ce que les objectifs de l’exercice soient en adéquation avec ceux de l’atelier. Rappelez-vous que tout ce qui est écrit dessous le ??? est une note pour le présentateur et n’apparaîtra donc pas dans la diapositive de présentation, mais apparaîtra dans la fenêtre du mode présentateur. 4.1.4.1 Sondages simples Voir ci-dessous quelques exemples de deux diapositives contenant un exercice suivi de leurs solutions. Exemple 1 Contexte : Les participants à l’atelier viennent d’apprendre quelles fonctions utiliser pour effectuer des comparaisons entre groupes dépendants et indépendants, et ont également été initiés à la vérification d’hypothèses unilatérales et bilatérales. Objectif : évaluer les connaissances des participants et les rendre plus confiants dans le choix du test à deux échantillons approprié dans leur recherche. Elaboré par: Esteban Gongora Bernoske. --- Nous souhaitons évaluer si nous trouvons plus d&#39;acromanthules dans les zones boisées et ombragées par rapport aux zones ouvertes. Nous sommes allés sur le terrain et avons compté le nombre d&#39;individus (variable : `abundance`) dans dix paysages forestiers et ouverts répartis de manière aléatoire (variable : `type_of_area`). Laquelle des fonctions suivantes serait appropriée pour tester notre hypothèse ? 1. `t.test(type_of_area, abundance, data = acromantula_experiment, alternative = &quot;two.sided&quot;)`; 2. `t.test(type_of_area, abundance, data = acromantula_experiment, paired = TRUE, alternative = &quot;two.sided&quot;).` 3. `t.test(type_of_area, abundance, data = acromantula_experiment, alternative = &quot;one.sided&quot;)`; ??? Note : Pendant ce moment, un sondage doit être ouvert aux participants. Une fois que vous avez obtenu la réponse des participants, montrez-leur la bonne réponse. Vous pouvez demander à l&#39;un des participants d&#39;expliquer sa réponse. --- Nous souhaitons évaluer si nous trouvons plus d&#39;acromanthules dans les zones boisées et ombragées par rapport aux zones ouvertes. Nous sommes allés sur le terrain et avons compté le nombre d&#39;individus (variable : `abundance`) dans dix paysages forestiers et ouverts répartis de manière aléatoire (variable : `type_of_area`). Laquelle des fonctions suivantes serait appropriée pour tester notre hypothèse ? 1. `t.test(type_of_area, abundance, data = acromantula_experiment, alternative = &quot;two.sided&quot;)`; 2. `t.test(type_of_area, abundance, data = acromantula_experiment, paired = TRUE, alternative = &quot;two.sided&quot;).` 3. `t.test(type_of_area, abundance, data = acromantula_experiment, alternative = &quot;one.sided&quot;)`; #&lt;&lt; ??? Note : Vous devez préciser aux participants la distinction entre les tests d&#39;hypothèse bilatéraux et unilatéraux (i.e. one-sided and two-sided; dans le contexte du problème). En outre, vous devez également rappeler les différences entre les mesures dépendantes et indépendantes (en rapport avec l&#39;argument `paired`). --- Exemple 2 Contexte : Les participants et participantes ont été initiés aux modèles linéaires généralisés, et viennent d’apprendre la distribution de Poisson, ses hypothèses selon lesquelles la variance est égale à la moyenne, et comment la sur-dispersion de leurs données peut être un problème lors de l’ajustement de ces modèles. Ils ont été initiés à la famille quasi-Poisson et à la possibilité d’appliquer une correction de sur-dispersion pour les données binaires avec l’objet de famille “quasibinomial”. Objectif : Évaluer la capacité du participant ou de la participante à appliquer le concept de correction de la sur-dispersion à différents types de données, pour l’aider à mieux comprendre la relation entre les objets de famille et les fonctions de liaison, et pour renforcer l’idée que les modèles peuvent être mis à jour sans avoir à en créer de nouveaux. Elaboré par: Esteban Gongora Bernoske. --- Nous avons maintenant réalisé que l&#39;exemple de proportion pour les cerfs infectés peut avoir des problèmes de surdispersion (la variance augmente beaucoup plus vite que la moyenne). Laquelle des fonctions suivantes serait une mise à jour appropriée pour tenir compte de la surdispersion dans nos données sur les proportions ? 1. `prop.reg.quasi &lt;- glm(prop.infected ~ res.avail, family = quasipoisson(link = &quot;logit&quot;), weights = n.total)` ; 2. `prop.reg.quasi &lt;- glm(prop.infected ~ res.avail, famille = quasibinomial, poids = n.total)` ; 3.`prop.reg.quasi &lt;- update(prop.reg2, family=quasibinomial(link = &quot;logit&quot;))` ; ??? Note : Pendant ce moment, un sondage devrait être ouvert aux participants. Une fois que vous avez obtenu la réponse des participants, montrez-leur la bonne réponse. Vous pouvez demander à l&#39;un des participants d&#39;expliquer sa réponse. --- Nous avons maintenant réalisé que l&#39;exemple de proportion pour les cerfs infectés peut avoir des problèmes de surdispersion (la variance augmente beaucoup plus vite que la moyenne). Laquelle des fonctions suivantes serait une mise à jour appropriée pour tenir compte de la surdispersion dans nos données sur les proportions ? 1. `prop.reg.quasi &lt;- glm(prop.infected ~ res.avail, family = quasipoisson(link = &quot;logit&quot;), weights = n.total)` ; 2. `prop.reg.quasi &lt;- glm(prop.infected ~ res.avail, famille = quasibinomial, poids = n.total)` ; 3. `prop.reg.quasi &lt;- update(prop.reg2, family=quasibinomial(link = &quot;logit&quot;)) #&lt;&lt;` ; ??? Note : Vous pouvez maintenant expliquer aux participants que nous pouvons obtenir le modèle corrigé avec les options 2 et 3. Cependant, l&#39;option 3 est le bon choix car vous aviez demandé aux participants de mettre à jour le modèle `prop.reg2`. Vous pouvez également rappeler aux participants que chaque distribution a une fonction de lien par défaut, donc l&#39;utilisation de `family = quasibinomial` et `family=quasibinomial(link = &quot;logit&quot;)` produira le même résultat que `logit` est la fonction de lien par défaut pour la distribution quasibinomiale. --- 4.1.4.2 Exercice de groupe Le travail en petits groupes permet d’exploiter les forces de chaque membre du groupe et d’améliorer le succès du cadre collectif. Cet exercice exige que les participants soient répartis au hasard dans des salles de réunion (idéalement, 5 participants par salle) et doit comprendre une activité se rapportant à un point de discussion. À la fin de cet exercice, les groupes sont reconvoqués et un des participants de chaque salle de réunion doit faire un rapport et résumer la discussion. Cette activité doit durer environ 10 minutes (parfois moins si elle est très simple) et doit utiliser les informations qui ont été fournies aux participants pendant l’atelier. Voir ci-dessous deux exemples de diapositives contenant un exercice suivi de sa solution : Exemple 1 Contexte : Cet exercice doit être fourni pour préparer le terrain aux discussions lors d’un atelier de visualisation de données. Il n’exige pas aux participants et participantes une connaissance solide de la visualisation de données. Objectif : Encourager la réflexion critique des participants et des participantes autour de la visualisation de données. Elaboré par: Esteban Gongora Bernoske. --- Discussion de groupe : Vous trouverez ci-dessous trois graphiques compilés à partir d&#39;un livre de visualisation (référence indiquée dans la diapositive suivante). Ouvrez et observez les tableaux et discutez avec votre groupe pour répondre aux questions suivantes : (a) Quels problèmes voyez-vous dans chacun des tableaux ? (b) Quelles sont les conséquences de ces problèmes que vous avez identifiés ? (c) Que changeriez-vous dans chacun d&#39;eux pour améliorer leur information ? ### Ajoutez ces images côte à côte. ![](https://socviz.co/assets/ch-01-chartjunk-life-expectancy.png) ![](https://socviz.co/assets/ch-01-holmes-monstrous-only.png) ![](https://socviz.co/assets/ch-01-democracy-nyt-version.png) ![](https://socviz.co/assets/ch-01-excel-3d-column-chart-values.png) ??? Note : Lisez clairement l&#39;exercice aux participants. Dites-leur qu&#39;ils doivent résumer leurs réponses et qu&#39;une personne doit ensuite faire un compte rendu de la discussion lorsque la classe est convoquée. Vous pouvez prévoir 5 à 8 minutes pour la discussion dans les salles de réunion (en fonction de la taille du groupe) car il s&#39;agit d&#39;un exemple très simple. --- Discussion de groupe : Vous trouverez ci-dessous trois graphiques compilés à partir d&#39;un (livre de visualisation) [https://socviz.co/lookatdata.html]. Ouvrez et observez les tableaux et discutez avec votre groupe pour répondre aux questions suivantes : (a) Quels problèmes voyez-vous dans chacun des tableaux ? (b) Quelles sont les conséquences de ces problèmes que vous avez identifiés ? (b) Que changeriez-vous dans chacun d&#39;eux pour améliorer leur information ? ### Afficher les images côte à côte ![](https://socviz.co/assets/ch-01-democracy-nyt-version.png) ![](https://socviz.co/assets/ch-01-democracy-voeten-version-2.png) ??? Note : Les chiffres en question ne sont pas seulement une question de mauvais goût (subjectif), mais ont des problèmes liés à la manière dont ils transmettent l&#39;information. Dans cet exemple, le problème n&#39;est pas dû à une différence dans la façon dont l&#39;axe des y est dessiné. Il s&#39;agit plutôt d&#39;une mesure différente : nous examinons maintenant la tendance du score moyen, plutôt que la tendance de la réponse la plus élevée possible. --- Exemple 2 Contexte : Les participants et participantes viennent d’être initiés aux analyses multivariées, et viennent de voir le tableau récapitulatif des principales caractéristiques des ordinations sans contrainte (https://wiki.qcbs.ca/_media/summary_ordination.jpg?cache=). Objectif : Permettre aux participants et participantes d’appliquer de manière critique les informations présentées dans cet atelier en déterminant quel type d’étude/données correspondrait le mieux aux différents types d’ordinations. Elaboré par: Esteban Gongora Bernoske. --- Discussion de groupe : Chaque groupe se verra attribuer au hasard un type d&#39;ordination. Vous discuterez au sein de votre groupe des types d&#39;ensembles de données possibles qui correspondent le mieux au type d&#39;ordination qui vous a été attribué. Chaque groupe présentera un exemple concret de projet/étude/expérience qui serait utilisé avec sa méthode d&#39;ordination. ### Inclure le tableau récapitulatif pour référence. ![](https://wiki.qcbs.ca/_media/summary_ordination.jpg?cache=) ??? Note : Lisez clairement l&#39;exercice aux participants et attribuez à chaque salle de réunion un type d&#39;ordination. Dites-leur qu&#39;ils doivent utiliser les caractéristiques du tableau récapitulatif pour trouver la réponse, puis une personne doit faire un compte rendu de la discussion lorsque la classe est convoquée en présentant l&#39;exemple choisi et en mentionnant brièvement la raison pour laquelle elle l&#39;a choisi. Vous pouvez prévoir 5 à 8 minutes pour la discussion dans les salles de réunion (en fonction de la taille du groupe). Pendant que les participants discutent dans leurs salles de réunion, pensez à des exemples possibles que vous pourriez leur donner au cas où la discussion ne se déroulerait pas comme prévu (n&#39;oubliez pas que c&#39;est la fin de l&#39;atelier et que les gens peuvent donc être déjà fatigués). --- Discussion de groupe : Chaque groupe se verra attribuer au hasard un type d&#39;ordination. Vous discuterez au sein de votre groupe des types d&#39;ensembles de données possibles qui correspondent le mieux au type d&#39;ordination qui vous a été attribué. Chaque groupe présentera un exemple concret de projet/étude/expérience qui serait utilisé avec sa méthode d&#39;ordination. ### Inclure le tableau récapitulatif pour référence. ![](https://wiki.qcbs.ca/_media/summary_ordination.jpg?cache=) ??? Note : Mentionnez quelques exemples ou utilisez les exercices présentés pendant l&#39;atelier pour conclure la discussion. --- 4.1.4.3 Exercise individuel Des exercices individuels simples demandent aux participants de pratiquer un peu par eux-mêmes. En fonction de la difficulté des exercices, pensez à prévoir entre 5 et 10 minutes pour leur exécution. Bien que ces exercices aident les participants à assimiler le contenu, certains d’entre eux peuvent être moins motivés pour les pratiquer et les exécuter (contrairement aux exercices de groupe). C’est pourquoi il faut envisager d’inclure d’autres types d’exercices en plus de ceux-ci. À la fin de ces exercices, le présentateur doit donner l’occasion à un ou quelques participants de présenter et de discuter leurs réponses. Ci-dessous, nous pouvons voir un exemple d’exercice indépendant et sa solution : Contexte : Les participants viennent de se voir présenter les familles de distribution, les fonctions de liens et ils ont vu des exemples du fonctionnement des fonctions glm() et manyglm(). Objectif : Encourager les participants à toujours observer les tracés de diagnostic lorsqu’ils choisissent entre les modèles. Elaboré par: Esteban Gongora Bernoske. --- Utilisez `manyglm()` pour estimer les réponses de la composition de la communauté d&#39;acariens à toutes les variables environnementales associées à l&#39;ensemble de données sur les `acariens`. Quelles familles d&#39;erreurs (gaussiennes, de poisson ou binomiales négatives) correspondent le mieux aux données ? N&#39;oubliez pas de charger les bibliothèques `vegan` et `mvabund`, et d&#39;utiliser `data(mite)` et `data(mite.env)` pour charger les ensembles de données. Conseil : Souvenez-vous de ce que nous avons dit sur les hypothèses de modèle ! ??? Note : L&#39;objectif de cet exercice est de permettre aux participants d&#39;écrire indépendamment les modèles, d&#39;assigner les arguments appropriés liés aux familles de distribution et de réaliser qu&#39;ils doivent tracer les résidus par rapport aux valeurs ajustées pour décider du meilleur modèle. L&#39;instructeur peut rappeler aux participants ce que les deux ensembles de données comprennent. L&#39;instructeur ou l&#39;assistant peut aider les participants à se rendre compte des arguments qu&#39;ils peuvent utiliser en leur suggérant d&#39;utiliser la fonction d&#39;aide &quot;?`&quot;. À la fin de cet exercice, invitez les participants à partager leur réponse et demandez-leur comment ils l&#39;ont obtenue. --- Utilisez `manyglm()` pour estimer les réponses de la composition de la communauté d&#39;acariens à toutes les variables environnementales associées à l&#39;ensemble de données sur les `acariens`. Quelles familles d&#39;erreurs (gaussiennes, de poisson ou binomiales négatives) correspondent le mieux aux données ? Solution : ### A afficher à l&#39;intérieur d&#39;un bloc de code de morceaux : mitedat &lt;- mvabund(mite) mite.gaussian.glm &lt;- manyglm(mitedat ~ SubsDens + WatrCont + Substrat + Arbuste + Topo, data = mite.env, family=&#39;gaussian&#39;) mite.poisson.glm &lt;- manyglm(mitedat ~ SubsDens + WatrCont + Substrat + Arbuste + Topo, data = mite.env, family=&#39;poisson&#39;) mite.nb.glm &lt;- manyglm(mitedat ~ SubsDens + WatrCont + Substrat + Arbuste + Topo, data = mite.env, family=&#39;negative.binomial&#39;) # Afficher les tracés de diagnostic côte à côte : par(mfrow=c(1,3)) plot(mite.gaussian.glm) plot(mite.poisson.glm) plot(mite.nb.glm) ### Fin de la partie du code ??? Note : Montrez clairement quels arguments ont changé entre les fonctions et ce qu&#39;ils impliquent. Expliquez aux participants comment les hypothèses de distribution des résidus et des valeurs prédites doivent encore être satisfaites pour que les modèles soient considérés comme valables. --- Exemple 2 Inclure un autre exemple avec une discussion plus statistique. Contexte: Goal: Elaboré par: . --- --- --- 4.2 Comment développer des ateliers Cette section vous guide à travers le processus de contribution aux présentations des ateliers R du CSBQ. 4.2.1 Pour commencer Les ateliers R du CSBQ sont des présentations créées en utilisant xaringan, donc la première étape est d’installer la bibliotèque R xaringan. if(!require(devtools)) install.packages(&#39;devtools&#39;) devtools::install_github(&#39;yihui/xaringan&#39;) Ensuite, vous devez créer une copie locale du répertoire de l’atelier sur lequel vous travaillerez, que vous trouverez ici. Pour ce faire, vous pouvez cloner le répertoire GitHub sur votre ordinateur. Pour ce faire, vous pouvez utiliser la ligne de commande (plus de détails ici) : git clone https://github.com/QCBSRworkshops/workshop01.git # changez ce lien en fonction de l&#39;atelier sur lequel vous travaillez ! Si vous n’êtes pas à l’aise avec la ligne de commande, vous pouvez cloner ce dépôt d’archives en utilisant GitHub Desktop, en suivant les instructions ici. Une fois que vous avez cloné le dépôt d’archives, vous êtes prêt à commencer le développement ! 4.2.2 Flux de travail GitHub GitHub crée des dépôt d’archives avec une seule branche par défaut, nommée dev (si vous travaillez en ligne de commande) ou main (si vous travaillez dans GitHub Desktop). C’est la branche que vous voyez quand vous visitez le dépôt d’archives. Nous vous recommandons fortement de travailler sur une nouvelle branche, qui vous permet de développer les ateliers sans affecter la branche principale du dépôt d’archives. Travailler sur une branche distincte signifie que les changements ne sont mis en œuvre dans le contenu original qu’une fois que vos contributions ont été examinées. C’est une façon “plus sécuritaire” de développer les ateliers, particulièrement lorsque plusieurs personnes collaborent sur un atelier en même temps. Créer et publier une nouvelle branche. Choisissez un nom qui décrit explicitement ce que vous modifiez, par exemple workshop1_intro si vous travaillez sur l’introduction de l’atelier 1. Sur la ligne de commande : git branch workshop1_intro # créer une nouvelle branche Github Desktop (instructions ici). Passer à cette branche. Assurez-vous que vous travaillez sur votre nouvelle branche ! Sur la ligne de commande : git checkout workshop1_intro # passer à cette branche # Notez que vous pouvez créer et changer de branche en une seule ligne : git checkout -b workshop1_intro GitHub Desktop (instructions ici). Effectuez vos modifications, en suivant les lignes directrices énumérées ci-dessus. Ajoutez et validez vos modifications. Une fois que vous avez terminé de faire des changements sur votre branche, ajoutez-les et validez-les pour enregistrer ces changements. Lorsque vous validez des modifications, il est essentiel d’inclure un message de validation qui résume brièvement ce que vous avez fait. Soyez bref mais informatif ! Sur la ligne de commande : git add -A # ajoutez tous vos changements git commit -m &quot;fix code for plot in Challenge 1&quot; # commit your changes with a message Vous pouvez également utiliser GitHub Desktop pour ajouter des modifications (instructions ici) et les valider (instructions ici). Synchronisez votre branche principale avec le référentiel distant. Il est important de s’assurer que votre branche principale est à jour avant de la modifier. Retournez à la branche principale et récupérez les modifications qui ont été faites depuis la dernière copie du dépôt d’archives. Tirez le dev sur la ligne de commande : git checkout dev # retour à l&#39;agence principale pull git # pull changes Tirez la branche main sur GitHub Desktop (instructions ici). Fusionnez votre branche avec la branche principale locale. Retournez à votre branche (par exemple workshop1_intro) et fusionnez-la avec votre branche principale locale. S’il y a des conflits, veuillez les résoudre ! Vous pouvez fusionner votre branche avec la branche dev en utilisant la ligne de commande : git checkout workshop1_intro # retournez à votre agence git merge dev # fusionner la branche principale avec votre branche Fusionnez votre branche avec la branche main dans GitHub Desktop (instructions ici). Poussez votre branche fusionnée localement vers le dépôt d’archives GitHub distant. En ligne de commande, vous pouvez pousser votre branche fusionnée localement (par exemple workshop1_intro) vers le dépôt d’archives distant comme ceci : git push --set-upstream origin workshop1_intro # push to the remote ! Poussez votre branche (par exemple workshop1_intro) vers le dépôt d’archives distant dans GitHub Desktop (voir étape #4)). Ouvrez une demande d’extraction. Les pull requests ou demandes d’extraction sont un moyen de faire connaître à vos collaborateurs les changements que vous avez poussés vers une branche du dépôt d’archives Github. Une fois que vous avez ouvert une demande d’extraction, nous pouvons examiner les changements potentiels et ajouter des commandes de suivi (si nécessaire) avant que vos changements ne soient fusionnés dans la branche principale. Pour ouvrir une demande d’extraction pour votre branche (par exemple workshop1_intro), veuillez suivre ces instructions. Assignez votre demande d’extraction (pull request) à un examinateur (un des coordinateurs ou des coordinatrices des ateliers R du CSBQ). Votre demande sera révisée et fusionnée avec le dépôt principal. Une fois que la demande d’extraction est fusionnée, n’oubliez pas de tirer la branche principale ! 4.3 Contribuer autrement Si vous n’êtes pas à l’aise avec GitHub, vous pouvez toujours nous aider à améliorer les ateliers ! Si vous remarquez des erreurs ou des incohérences, ou si vous souhaitez faire une suggestion, que ce soit sur la forme ou le contenu, vous êtes invités à ouvrir un numéro. Vous pouvez suivre ces étapes simples pour créer un nouveau numéro. "]
]
