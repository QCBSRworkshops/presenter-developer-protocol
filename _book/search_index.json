[
["developing-en.html", "Section 9 Developing 9.1 Guidelines", " Section 9 Developing 9.1 Guidelines This guide is designed to aid developers during the creation and modification of workshop content. We want to ensure attendees can focus on the content being presented without being distracted by issues of style, grammar, punctuation and/or structure. Please read through this guide carefully before starting, and refer back to it regularly as you work. 9.1.1 Main priorities Here we have compiled a list of priorities for workshop developers. Developers would ideally accomplish all of these tasks, however if circumstances make this impossible, it is important to focus on structural changes before issues of style.(See below for more specific rules). Specific to adapting workshops to remote framework: Hide slides from existing workshops to fit the new 3 hours format, including short breaks and time for exercises (current workshop run time is about 4 hours). Do not delete slides. We are aware that some workshops will be more difficult to shorten than others - if workshops need to run slightly over 3 hours to guarantee accurate and complete information than that is ok (use your judgement). Develop new or adapt current exercises to better suit the remote workshop format and the use of breakout rooms. Exercises should be informative and engaging. Remember to leave time for students to work through exercises and ask questions. General priorities: Address existing issues submitted to GitHub. Ensure code is working correctly and that code matches workshop presentation. Continue to check this as you make changes. Ensure that French and English versons of a workshop are both updated and that content is equivalent. Workshops should not contain spelling, grammar or punctuation errors. Ensure workshop slides are written in a consistent style, this helps with the flow of workshops and student understanding. This is especially important when working collaboratively with other developers. 9.1.2 Structural rules Do not allow the content of slides to overflow the screen. The code used to generate an outcome (figure or calculation) must correspond to the code being displayed. Include example. Use backticks ` whenever you mention a function, an object or a package in your text. Use three backticks to separate code chunks from prose. Continue… 9.1.3 Grammar and style Pay attention to punctuation, spelling, and grammar. Avoid unnecessary abbreviations (e.g. use do not instead of don’t). Strive to be clear and concise. Avoid run-on sentences. Ensure changes to content are made on both French and English versions. Read over the workshop in its entirety to ensure there is good flow. 9.1.4 Exercise examples Compile and produce examples from evidence-based learning modes and effective strategies to deliver remote workshops to participants. "]
]
