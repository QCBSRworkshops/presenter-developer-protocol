[
["developing-en.html", "Section 9 Developing 9.1 Guidelines 9.2 How to develop the workshops 9.3 Other ways to contribute", " Section 9 Developing 9.1 Guidelines This guide is designed to aid developers during the creation and modification of workshop content. We want to ensure attendees can focus on the content being presented without being distracted by issues of style, grammar, punctuation and/or structure. Please read through this guide carefully before starting, and refer back to it regularly as you work. 9.1.1 Main priorities Here we have compiled a list of priorities for workshop developers. Developers would ideally accomplish all of these tasks, however if circumstances make this impossible, it is important to focus on structural changes before issues of style.(See below for more specific rules). Specific to adapting workshops to remote framework: Hide slides from existing workshops to fit the new 3 hours format, including short breaks and time for exercises (current workshop run time is about 4 hours). Do not delete slides. We are aware that some workshops will be more difficult to shorten than others - if workshops need to run slightly over 3 hours to guarantee accurate and complete information than that is ok (use your judgement). Develop new or adapt current exercises to better suit the remote workshop format and the use of breakout rooms. Exercises should be informative and engaging. Remember to leave time for students to work through exercises and ask questions. General priorities: Address existing issues submitted to GitHub. Ensure code is working correctly and that code matches workshop presentation. Continue to check this as you make changes. Ensure that French and English versons of a workshop are both updated and that content is equivalent. Workshops should not contain spelling, grammar or punctuation errors. Ensure workshop slides are written in a consistent style, this helps with the flow of workshops and student understanding. This is especially important when working collaboratively with other developers. 9.1.2 Structural rules Do not allow the content of slides to overflow the screen. The code used to generate an outcome (figure or calculation) must correspond to the code being displayed. Include example. Use backticks ` whenever you mention a function, an object or a package in your text. Use three backticks to separate code chunks from prose. Continue… 9.1.3 Grammar and style Pay attention to punctuation, spelling, and grammar. Avoid unnecessary abbreviations (e.g. use do not instead of don’t). Strive to be clear and concise. Avoid run-on sentences. Ensure changes to content are made on both French and English versions. Read over the workshop in its entirety to ensure there is good flow. 9.1.4 Exercise examples Compile and produce examples from evidence-based learning modes and effective strategies to deliver remote workshops to participants. 9.2 How to develop the workshops This section guides you through the process of contributing edits to QCBS R workshop presentations. 9.2.1 Getting started The QCBS R Workshops are Rmarkdown presentations created using xaringan, so the first step is to install the R package xaringan. if(!require(devtools)) install.packages(&#39;devtools&#39;) devtools::install_github(&#39;yihui/xaringan&#39;) Secondly, you need to create a local copy of the repository for the workshop you will be working on, found here. To do so, you can clone the GitHub repository on your computer. You can use the command line to do this (more details here): git clone https://github.com/QCBSRworkshops/workshop01.git # change this link depending on the workshop you&#39;re working on! If you are not comfortable with the command line, you can clone this repository using GitHub Desktop, following instructions here. Once you’ve cloned the repository, you’re ready to begin developing! 9.2.2 GitHub workflow GitHub creates repositories with a single default branch, named dev (if you work in the command line) or master (if you work in GitHub Desktop). This is the branch you see when you visit the repository. We strongly recommend working on a new branch, which allows you to develop the workshops without affecting the main branch in the repository. Working on a separate branch means that changes are only implemented in the original content once your contributions are reviewed. This is a “safer” way to develop the workshops, particularly when multiple people are collaborating on a workshop at the same time. Create and publish a new branch. Choose a name that is explicit about what you are adding, such as workshop1_intro if you want to edit the introduction of workshop 1. On the command line: git branch workshop1_intro # creates a new branch Github Desktop (instructions here). Switch to this branch. Make sure you’re working on your new branch! On the command line: git checkout workshop1_intro # switches to this branch # Note that you can create and switch branch in a single line: git checkout -b workshop1_intro GitHub Desktop (instructions here). Make your changes, following the Guidelines listed above. Add and commit your changes. Once you are finished making changes on your branch, add and commit them to record these changes. When you commit changes, it is essential to include a commit message that briefly summarizes what you’ve done. Keep it brief but informative! On the command line: git add -A # add all your changes git commit -m &quot;fix code for plot in Challenge 1&quot; # commit your changes with a message You can also use GitHub Desktop to add changes (instructions here) and commit them (instructions here). Sync your main branch with the remote repository. It’s important to make sure your main branch is up to date before changing it. Go to back to the main branch and pull changes that were made since you last copied the repository. Pull the dev on the command line: git checkout dev # switch back to the main branch pull git # pull changes Pull the master branch on GitHub Desktop (instructions here). Merge your branch with the main branch locally. Switch back to your branch (e.g. workshop1_intro) and merge it with your local main branch. If there are conflicts, please resolve them! You can merge your branch with the dev branch using the command line: git checkout workshop1_intro # switch back to your branch git merge dev # merge the main branch with your branch Merge your branch with the master branch in GitHub Desktop (instructions here). Push your locally merged branch to the remote GitHub repository. On the command line, you can push your locally merged branch (e.g. workshop1_intro) to the remote repository like this: git push --set-upstream origin workshop1_intro # push to the remote! Push your branch (e.g. workshop1_intro) to the remote repository in GitHub Desktop (see step #4)). Open a Pull Request. Pull requests are a way to let your collaborators know about changes that you’ve pushed to a branch in the Github repository. Once you’ve opened a pull request, we can review potential changes and add follow-up commits (if needed) before your changes are merged into the main branch. To open a pull request for your branch (e.g. workshop1_intro), please follow these instructions. Assign your pull request to a reviewer (one of the R workshop coordinators). The reviewer will then review, squash, and merge your changes. Once the pull request is merged, do not forget to pull the main branch! 9.3 Other ways to contribute If you are not comfortable with GitHub, you can still help us improve the workshops! If you notice any mistakes or inconsistencies, or if you’d like to make a suggestion, either in form or in content, you’re invited to open an issue. You can follow these simple steps to create a new issue. "]
]
